OOPS Concept - Pillars of objected programming
-----------------------------------------------
A - Abstraction
P - Polymorphism
I - Inheritence
E - Encapsulation

Inheritance
-----------
	- a class can inherit the members of another class
	- we use the extends keyword
	- the class that extends is called the child class / derived class / sub class
	- the class that is being extended is called the parent class / base class / super class
	- inheritance gives me code reusablity 
	- when a child class extends a parent class it can access the members of the parent class as if it were it's own member
	- make sure the classes satisfy the is-a relation	
	- inheritance gives us an enchanced version of an existing object
	- types of inheritance
	-----------------------
		- single level inheritance
		
		- multi level inheritance

		- heirarchical inheritance
	
		- multiple inheritance
			- this is not supported by java

types of relation between 2 classes
------------------------------------
	- is-a
		- acheived through inheritance
	- has-a
		- is not acheived through inheritence
		- is acheived through composition and aggregation
		- we declare an object of a class as a member in another class

Polymorphism
------------
	- means more than one form
	- method overloading
		- is a compile time(static) polymorphism
		- have same method name but different parameters
		- different parmaters could be 1) no. of parameters 2) type of parameter 3) order of the parameters
		- we do not consider the return type of the method here
		- inheritence is not a pre-requisite here
		- purpose : convinience
		- Eg. System.out.println("hello");
		      System.out.println(45);
		      System.out.println(true);

			// if there was no method over loading
		      System.out.printlnString("hello");
		      System.out.printlnInt(45);
		      System.out.printlnBoolean(true);
			
	- method overriding
		- is also called runtime(dynamic) polymorphism
		- because the binding of the overriding method to the refernce variable happens at runtime
		- inheritence is a pre-requisite 
		- have a method with same name, same arguments and same return type in a super and a sub class
		-  then we say that the method in the super class is over ridden by the method in the sub class
		- we are redefining an existing functionality of the super class in the sub class


Encapsulation
-------------
	- wrapping up of properties and methods into a single unit called class
	- hiding of the data
	- we can make use of the access specifiers 
	- access specifiers are to be used in front of the members of the class
	- you can use public or default in front of a class
	- making a class public doest mean that all its members are implicitly public
	- you can put private in front of a class provided the class has to be a nested/inner class
	- encapsulation says that make your data member/properties private and give access through public getters and setters
	- the getters give the read access to the property/ data member
	- the getters are also called accessors
	- the setters give the write access to the property/ data member
	- the setters are also called mutators
	- using the getters and setters we can control the read and write access of the properties
--------------------------------------------------------------------------------------------------------------------
Access Specifiers		within class	within package	outside package+inherited class	 outside package		
-----------------------------------------------------------------------------------------------------------------------
private				yes			no		no				no
default/no modifier		yes			yes		no				no	
protected			yes			yes		yes				no
public				yes			yes		yes				yes

private is the most restricted
public is the least restricted



toString()
----------
	- whenever we need a meaningful representation of the object overirde the toString() method of the Object class
	- refer the online docs for toString method in the Object class

equals() and hashcode()
-----------------------

refernce
 https://docs.oracle.com/javase/8/docs/api/

	- every object that is created has a hashcode generated for it
A
	abstraction --- 356
	abstraction --- 245
	abstract --- 115

B
C
	
D

Abstraction
------------
	- highlighting of the essential features
	- acheived through abstract classes and interfaces

	- abstract class
		- an abstract class can have one or more abstract methods
		- an abstract method has only the method declaration and no definition/body
		- when the class becomes abstract, the class is incomplete
		- for that very reason we cannot create objects of abstract classes
		- abstract classes are meant to be inherited
		- this class which inherits the abstract class has to make sure that the abstract method is overridden
		- this class can be called a complete class/ concrete class

		- an abstract class gives is-a relation to the concrete class
		- an abstract forces the concreted class to provide the functionality that it wants to

		- can a class be abstract with no abstract methods?
		- can the class which extends the abstract class not override the abstarct method? if so what would happen to that class?

	- interfaces
		- interface is a pure abstract class ( this definition holds good until java 8)
		- interface can also have variables declared in them and they are by default public static final
		- the methods inside an interface is by default public and abstract
		- from java 8 and up, an interface can have abstract method( methods with no body), default method ( methods with body), static method ( static methods are with body)
		-	interface MyInter{
				double PI = 3.14;
				void method1();
				void method2();
			}
		- we cannot create an object for an interface
		- interfaces are meant to be implemented by a class
		- when a class implements an interface, it has to implement/override the abstract methods of the interface
		- now this class is generally called as the implementation class of the interface
		- class MyClass implements MyInter{
			public void method1(){}
			public void method2(){}
			public void method3(){}
		}

		- an interface is a contract to a class
		- an interface does not give is-a relation to the class
		- an interface can extends another interface, but that doesnt mean it has inheritence
		- a class an implement any number of interfaces

example
--------
	interface SafetyGuidelines2022{
		void protectHead();
		void protectFeet();
	}


	interface SafetyGuidelines2025 extends SafetyGuideline2022{
		void insureLives();
	}
	abstract class ConstructionCompany{
		void constructHouses();

	}
	class LarsenTurbo extends ConstructionCompany implements SafetyGuidelines2022{
		public void protectHead(){
			System.out.println("provides fiber helmets....");
		}	
		public void protectFeet(){
			System.out.println("provides fiber shoes....");
		}
		void constructHouses(){}
		// extra methods	
	}

	class Opaline extends ConstructionComapny implements SafetyGuidelines2022{
		public void protectHead(){
			System.out.println("provides steel helmets....");
		}	
		public void protectFeet(){
			System.out.println("provides steel shoes....");
		}	
		void constructHouses(){}
		// extra methods
	}


combination
-----------

	a class  ----extends -----> a class
	a class ---implements----> interface, interface, interface ..
	a interface ----extends----> interface, interface, interface
	a interface ----no relation----> class

SQl JDBC - Connection, Statement


