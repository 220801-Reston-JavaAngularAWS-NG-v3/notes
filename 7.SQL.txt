Reference document
 - https://www.postgresqltutorial.com/postgresql-getting-started/what-is-postgresql/


ways to store data permanently 
1) Files
2) DBMS

CRUD
----
C - Create
R - Read
U- Update
D - Delete

DB - Database
DBMS - Database Management System/Software
     - a software 

Database software product and its vendors
------------------------------------------
1) Oracle provided by Oracle Corporation
2) SqlServer provided by Microsoft
3) MySql
4) Postgres

SQL - Structured Querying Language, ANSII SQL

some diferrences/variations is called the dialect - Oracle dialect, postgres dialect, 


Client/Server Architecture
-------------------------
	- multi user DB which uses client/server communication
	- a web server hosts a web application which can provide a webpage upon a request from a client
	- a file server hosts files which can provide files upon a request from a client
	- a database server hosts database which provide data upon a request from the client

	- in order for any client to contact the server, info that the client should know
		1) Protocol
		2) IP address of the computer in which the server is running
		3) Port number - a 4 digit, many servers listen on their default port numbers, like tomcat(web server) - 8080, weblogic(web server) - 7001, 
												postgres(database server) - 5432
		4) credentials - username/ password

after installing postgres you have the 
		- postgres server
		- postgres clients - psql (CLI), we can find psql here - C:\Program Files\PostgreSQL\14\bin
				   - pgadmin4 (GUI), we can find pgadmin here - C:\Program Files\PostgreSQL\14\pgAdmin 4\bin
				   - dbeaver (GUI) , has to be installed seperately
				   - java program

steps
------
	-pre requisite for client to contact the server - the server should be up and running
	--------------------------------------------------------------------------------------
		I went to the services, and made sure postgres 14 server service is running

	-to connect to postgres server from command prompt (cmd)
	---------------------------------------------------
		C:\Program Files\PostgreSQL\14\bin>psql --host=localhost --port=5432 --username=postgres --password
			- here --host, --port, --password in not required as long as you choose to work with the default settings
			- once you enter the password, psql will connect to the server and we should see postgres=# prompt


database 
	- a collection of tables
	- the postgres installation has a default database created called postgres
	- you can list all the databases available in the server
		use \l to list all the databases
	- the prompt tell us the database that we are connected to.
	- you can create your own databases
		create database <db name>;
	- you can connect/switch to a db 
		\c <db name>
		now the prompt would change to the db name
table
	- has rows and columns
	- each row in a table is called a record
	- store the data
	- command to list all the tables in the current/connected DB
		\dt 

the commands that start with backslash are called meta commands - specifc to postgres

the SQL queries are categorized into 5
--------------------------------------
	1) DDL - Data Definition Language
			- work with the structure of the table
			- create a table, alter a table, drop a table

	2) DML - Data Manipulation Language
			- work on the data present in a table
			- insert a record, update a record, delete a record
			
	3) DQL - Data Querying Language
			- fetch the record from the table
			- select query
			- though there is only 1 query it has multiple clauses

	4) TCL - Transaction Querying Language
			- work with transactions
			- commit, rollback, savepoints

	5) DCL - Data Control Language
			- granting/revoke priveleges to/from users
			- a previlege could be creating a table, insert record into the table etc 
			

Normalization
ACID properties of Transaction

Queries that I used in session
------------------------
1)
CREATE DATABASE book_management_system;

2)
\c book_management_system;

3) 
\l;

4)
\dt;

5)
CREATE TABLE book_details(book_id  INT, book_title VARCHAR(100), book_author VARCHAR(50), book_genre VARCHAR(20), book_cost INT, book_image_url VARCHAR(255));

6) 
ALTER TABLE book_details DROP COLUMN book_image_url;

7) 
ALTER TABLE book_details ADD COLUMN book_image_url VARCHAR(255);

8) 
ALTER TABLE book_details ALTER COLUMN book_image_url TYPE VARCHAR(250);

9)
DROP TABLE book_details;
I created the table again

10)
INSERT INTO book_details VALUES(101, 'Harry Potter and the Chamber of Secrets', 'J.K.Rowling', 'Fiction', 45, '');
INSERT INTO book_details VALUES(102, 'Harry Potter and the Half Blood Prince', 'J.K.Rowling', 'Fiction', 40, '');
SELECT * FROM book_details;

11)
UPDATE book_details SET book_cost=42 WHERE book_id=102;
UPDATE book_details SET book_cost=42;    -----------> be careful with this query
SELECT * FROM book_details;

12)
DELETE FROM book_details WHERE book_id=102;
SELECT * FROM book_details;

13)
DROP TABLE book_details;
CREATE TABLE book_details(book_id  INT GENERATED ALWAYS AS IDENTITY, book_title VARCHAR(100), book_author VARCHAR(50), book_genre VARCHAR(20), book_cost INT, book_image_url VARCHAR(255));
INSERT INTO book_details(book_title, book_author, book_genre, book_cost, book_image_url) VALUES('Harry Potter and the Chamber of Secrets', 'J.K.Rowling', 'Fiction', 45, '');
INSERT INTO book_details(book_title, book_author, book_genre, book_cost, book_image_url) VALUES('Harry Potter and the Order of Phoenix', 'J.K.Rowling', 'Fiction', 40, '');
INSERT INTO book_details(book_title, book_author, book_genre, book_cost, book_image_url) VALUES('Harry Potter and the Half Blood Prince', 'J.K.Rowling', 'Fiction', 30, '');
SELECT * FROM book_details;



Contraints
----------
- controls the data that you add to the table
- can be added in 3 ways
	1) column level constraint ( at the time of creating the table)

CREATE TABLE person (
	id SERIAL PRIMARY KEY,
	first_name VARCHAR (50),
	last_name VARCHAR (50),
	email VARCHAR (50) UNIQUE
);

	2) table level constraint ( at the time of creating the table)

CREATE TABLE person (
	id SERIAL  PRIMARY KEY,
	first_name VARCHAR (50),
	last_name  VARCHAR (50),
	email      VARCHAR (50),
        UNIQUE(email)
);
	3) Alter the table to add the contraint ( after the table has been created)

ALTER TABLE production_orders 
ALTER COLUMN qty
SET NOT NULL;

ALTER TABLE book_details ALTER COLUMN book_title SET NOT NULL;
ALTER TABLE book_details ALTER COLUMN book_author SET NOT NULL;
ALTER TABLE book_details ALTER COLUMN book_genre SET NOT NULL;
ALTER TABLE book_details ALTER COLUMN book_cost SET NOT NULL;


Primary Key
	- every table should have a primary key column/contraint
	- a column declared with primary key contraint by default is UNIQUE and NOT NULL
	- the primary key column is automatically indexed

UPDATE employee_details SET emp_city='Atlanta' WHERE emp_id=6784;


 	CREATE TABLE book_details(book_id  INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY, 
				  book_title VARCHAR(100) NOT NULL, 
				  book_author VARCHAR(50) NOT NULL, 
				  book_genre VARCHAR(20) NOT NULL, 
				  book_cost INT NOT NULL, 
				  book_image_url VARCHAR(255));


Foreign keys
------------

CREATE TABLE department_details (dept_id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY, dept_name VARCHAR(20) NOT NULL);

// CREATE TABLE employee_details(emp_id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY, emp_name VARCHAR(40) NOT NULL, emp_contact INT NOT NULL, emp_dept_id INT);

CREATE TABLE employee_details(emp_id INT GENERATED ALWAYS AS IDENTITY, 
			      emp_name VARCHAR(40) NOT NULL, 
                              emp_contact INT NOT NULL, 
                              emp_dept_id INT, 
                              PRIMARY KEY(emp_id),
			      FOREIGN KEY(emp_dept_id) REFERENCES department_details(dept_id)
                             );



an employee belongs to a department

employee to department - many to one
department to employee - one to many

an employee works in a project

employee to project - many to one
project to employee  - one to many

an employee stays in an address

employee to address  - one to one
address to employee - one to one

an employee has a user information

employee to user - one to one
user to employee  - one to one

an employee can enroll for courses

employee to course - many to many
course to employee - many to many

 a many to many relation between 2 tables will introduce a third table - employee_course_details

------------------------------------------------------------------------------------------------
employee_course_details
	emp_course_id(PK)
	emp_id(FK)
	course_id(FK)

department_details
	dept_id(PK)
	dept_name

project_details
	project_id (PK)
	project_name

address_details
	address_id (PK)
	address_city

user_details
	user_id(PK)
	user_name
	user_password

course_details
	course_id(PK)
	course_name

employee_details
	emp_id(PK)
	emp_name
	emp_contact
	emp_dept_id(FK)
	emp_proj_id(FK)
	emp_address_id(FK)
	emp_user_id(FK)
---------------------------------------



course_details
	course_id (PK)
	course_name

student_details
	student_id (PK)
	student_name
	student_contact
	

muliplicity
-----------
	one to one
	one to many
	many to one
	many to many
	

------------------------------------------
for project 1
--------------

a user has accounts

user to account - one user can have many accounts - one to many
account to user - many accounts belongs to one user - many to one

user_details
	user_id(PK)
	user_name
	user_password

account_details
	acc_id(PK)
	acc_holder_name
	acc_holder_address
	acc_holder_contact
	acc_balance
	acc_user_id(FK)
	
----------------------------------------------------






